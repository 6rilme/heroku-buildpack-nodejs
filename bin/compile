#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p "$BUILD_DIR/.heroku/node/"

### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

### Handle errors

handle_failure() {
  header "Build failed"
  failure_message | indent
}
trap 'handle_failure' ERR

### Compile

create_env() {
  echo "exporting environment variables"
  export_env_dir "$ENV_DIR"
  echo "writing .profile.d scripts"
  write_profile "$BP_DIR" "$BUILD_DIR"
  echo "writing buildpack export"
  write_export "$BP_DIR" "$BUILD_DIR"
  list_node_config
}

header "Creating runtime environment"
create_env | indent

install_bins() {
  local nodejs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local iojs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.iojs")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  list_engines "$nodejs_engine" "$iojs_engine" "$npm_engine"
  install_nodejs "$nodejs_engine" "$BUILD_DIR/.heroku/node"
  install_iojs "$iojs_engine" "$BUILD_DIR/.heroku/node"
  install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
}

header "Installing binaries"
install_bins | indent

restore_cache() {
  local cache_status=$(get_cache_status)

  if [ "$cache_status" == "disabled" ]; then
    echo "skipping (cache disabled)"
  elif [ "$cache_status" == "invalidated" ]; then
    echo "skipping (cache invalidated)"
  else
    local cache_directories=$(get_cache_directories)
    if [ "$cache_directories" == "" ]; then
      echo "no cacheDirectories specified; using default:"
      restore_cache_directories "node_modules"
    else
      echo "using cacheDirectories (package.json):"
      restore_cache_directories $cache_directories
    fi
  fi
}

header "Restoring cache"
restore_cache | indent

install_deps() {
  local dependency_status=get_dependency_status
  if [ "$dependency_status" == "prebuilt" ]; then
    echo "node_modules prebuilt"
    rebuild_node_modules
  elif [ "$dependency_status" == "unavailable" ]; then
    echo "no dependencies to install (no package.json)"
  else
    install_node_modules
  fi
}

header "Installing dependencies"
install_deps | indent

finalize_build() {
  create_cache
  summarize_app
}

header "Build succeeded"
finalize_build | indent
