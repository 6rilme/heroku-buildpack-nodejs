#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p "$BUILD_DIR/.heroku/node/"
cd $BUILD_DIR

### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

### Handle errors

handle_failure() {
  header "Build failed"
  failure_message | indent
}
trap 'handle_failure' ERR

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
  echo ""
  list_node_config
}

header "Creating runtime environment"
create_env | indent

install_bins() {
  local nodejs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local iojs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.iojs")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  list_engines "$nodejs_engine" "$iojs_engine" "$npm_engine"
  install_nodejs "$nodejs_engine" "$BUILD_DIR/.heroku/node"
  install_iojs "$iojs_engine" "$BUILD_DIR/.heroku/node"
  install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
}

header "Installing binaries"
install_bins | indent

restore_cache() {
  local cache_status=$(get_cache_status)

  if [ "$cache_status" == "disabled" ]; then
    echo "Skipping (cache disabled)"
  elif [ "$cache_status" == "invalidated" ]; then
    echo "Skipping (cache invalidated)"
  else
    local cache_directories=$(get_cache_directories)
    if [ "$cache_directories" == "" ]; then
      echo "cacheDirectories (default):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" "node_modules"
    else
      echo "cacheDirectories (package.json):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
    fi
  fi
}

header "Restoring cache"
restore_cache | indent

build_dependencies() {
  local dependency_status=get_dependency_status
  if [ "$dependency_status" == "prebuilt" ]; then
    echo "Prebuild detected (node_modules already exists)"
    rebuild_node_modules "$BUILD_DIR"
  elif [ "$dependency_status" == "unavailable" ]; then
    echo "Skipping (no package.json)"
  else
    install_node_modules "$BUILD_DIR"
  fi
}

header "Building dependencies"
build_dependencies | indent

cache_build() {
  local cache_directories=$(get_cache_directories)
  echo "Clearing previous node cache"
  clear_cache
  if [ "$cache_directories" == "" ]; then
    echo "cacheDirectories (default):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" "node_modules"
  else
    echo "cacheDirectories:"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
  fi
}

header "Caching build"
cache_build | indent

summarize_build() {
  cd $BUILD_DIR
  (npm ls --depth=0 || true) 2>/dev/null
}

header "Build succeeded!"
summarize_build | indent
